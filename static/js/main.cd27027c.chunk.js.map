{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","f","btnList","map","name","onClick","Statistics","good","neutral","bad","total","feedbackPercentage","isNaN","Math","round","Notification","msg","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","currentTarget","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,QAAU,mC,uICebC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,M,gBCgBQC,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oBAAIC,UAAWC,IAAEC,QAAjB,SACGJ,EAAQK,KAAI,SAAAC,GAAI,OACf,6BACE,wBAAQA,KAAMA,EAAMC,QAASN,EAA7B,SACGK,KAFIA,SCkBAE,EArBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,qCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,mDAEGE,MAAMD,GAAsB,EAAIE,KAAKC,MAAMH,GAF9C,WCDOI,EANM,SAAAC,GAAG,OAAI,6BAAKA,EAAIA,O,MCMtB,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBX,EADqB,KACfY,EADe,OAEED,mBAAS,GAFX,mBAErBV,EAFqB,KAEZY,EAFY,OAGNF,mBAAS,GAHH,mBAGrBT,EAHqB,KAGhBY,EAHgB,KA2BtBC,EAAqB,WACzB,OAAOf,EAAOC,EAAUC,GAM1B,OACE,qCACE,cAAC,EAAD,CAASd,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAlCe,SAAAwB,GAErB,OADaA,EAAEC,cAAcpB,MAE3B,KAAKG,EACHY,EAAQZ,EAAO,GAEf,MACF,KAAKC,EACHY,EAAWZ,EAAU,GAErB,MACF,KAAKC,EACHY,EAAOZ,EAAM,GAEb,MAEF,QACEgB,MAAM,gCAoBR,cAAC,EAAD,CAAS9B,MAAM,aAAf,SACG2B,IAAuB,EACtB,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,IACPX,mBAlBAJ,EAAOe,IAAwB,MAqBjC,cAAC,EAAD,CAAcN,IAAI,8BCvD5BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cd27027c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnList\":\"FeedbackOptions_btnList__1wuLn\"};","// import s from \"./Section.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport f from './FeedbackOptions.module.css'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <ul className={f.btnList}>\r\n    {options.map(name => (\r\n      <li key={name}>\r\n        <button name={name} onClick={onLeaveFeedback}>\r\n          {name}\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.string\r\n  ).isRequired,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n// import s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({good, neutral, bad, total, feedbackPercentage}) => (\r\n    <>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total: {total}</p>\r\n        <p>\r\n      Positive feedback:\r\n          {isNaN(feedbackPercentage) ? 0 : Math.round(feedbackPercentage)}%\r\n        </p>\r\n</>\r\n)\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  feedbackPercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = msg => <h2>{msg.msg}</h2>;\r\n\r\nNotification.propTypes = {\r\n  msg: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\nimport './App.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countFeedbacks = e => {\n    const name = e.currentTarget.name;\n    switch (name) {\n      case good:\n        setGood(good + 1);\n\n        break;\n      case neutral:\n        setNeutral(neutral + 1);\n\n        break;\n      case bad:\n        setBad(bad + 1);\n\n        break;\n\n      default:\n        alert('Don`t work - try again');\n        break;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    return (good / countTotalFeedback()) * 100;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave Feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={countFeedbacks}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            feedbackPercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification msg=\"No Feedbacks - Sorry\" />\n        )}\n      </Section>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}